generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("TEST_DATABASE_URL")
}

model User {
  isAdmin     Boolean   @default(false) @map("is_admin")
  createdAt   DateTime? @default(now()) @map("created_at")
  email       String    @id @unique @db.VarChar(64)
  firstName   String    @map("first_name") @db.VarChar(35)
  lastName    String    @map("last_name") @db.VarChar(35)
  lastLogin   DateTime? @default(now()) @map("last_login")
  password    String
  phoneNumber String?   @unique @map("phone_number") @db.VarChar(10)
  events      Event[]
  matches     Match[]
  profile     Profile?

  @@map("users")
}

model Profile {
  age    Int
  bio    String   @db.VarChar(250)
  gender String   @db.VarChar(20)
  traits String[] @db.VarChar(64)
  email  String   @id @db.VarChar(64)
  user   User     @relation(fields: [email], references: [email], onDelete: Cascade)

  @@map("profiles")
}

model Match {
  eventId   String
  userEmail String @db.VarChar(64)
  event     Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User   @relation(fields: [userEmail], references: [email], onDelete: Cascade)

  @@id([userEmail, eventId])
  @@map("matches")
}

model Event {
  id          String   @id @default(uuid())
  title       String   @db.VarChar(50)
  dateTime    DateTime @map("date_time")
  createdAt   DateTime @default(now()) @map("created_at")
  description String   @db.VarChar(250)
  payment     Int?
  type        String[] @db.VarChar(64)
  hostEmail   String   @map("host_email") @db.VarChar(64)
  host        User     @relation(fields: [hostEmail], references: [email], onDelete: Cascade)
  Match       Match[]

  @@map("events")
}
